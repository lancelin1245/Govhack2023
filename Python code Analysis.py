import pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns# Load the datasetsdf_motive_power_state = pd.read_csv("Motor vehicles on register, by motive power type and state:territory of registration, 2021, 2022 & 2023.csv")df_vehicle_state = pd.read_csv("Motor vehicles on register, by type of vehicle and state:territory of registration, 2021, 2022 & 2023.csv")df_motive_power_type = pd.read_csv("Motor vehicles on register, by motive power type and type of vehicle, 2021, 2022 & 2023.csv")# Display the first few rows of each dataset to inspect the datadf_motive_power_state.head(), df_vehicle_state.head(), df_motive_power_type.head()# Analysing growth rates of EV in all states# Calculate the growth rate for HEVs and BEV/FCEVs separately for each state from 2021 to 2023df_motive_power_state['HEVs'] = df_motive_power_state['HEVs'].str.replace(',', '').astype(int)df_motive_power_state['BEV/FCEVs'] = df_motive_power_state['BEV/FCEVs'].str.replace(',', '').astype(int)# Identify rows with invalid values in 'HEVs' and 'BEV/FCEVs' columnsinvalid_rows_hevs = df_motive_power_type[df_motive_power_type["HEVs"].str.contains('np', na=False)]invalid_rows_bev = df_motive_power_type[df_motive_power_type["BEV/FCEVs"].str.contains('np', na=False)]# Replace 'np' with 0 in 'HEVs' and 'BEV/FCEVs' columnsdf_motive_power_type['HEVs'] = df_motive_power_type['HEVs'].replace('np', '0').str.replace(',', '').astype(int)df_motive_power_type['BEV/FCEVs'] = df_motive_power_type['BEV/FCEVs'].replace('np', '0').str.replace(',', '').astype(int)# Combine the counts of HEVs and BEV/FCEVs to represent total EVs for each vehicle type and yeardf_motive_power_type["Total EVs"] = df_motive_power_type["HEVs"] + df_motive_power_type["BEV/FCEVs"]# Compute the growth rate of EVs by vehicle type from 2021 to 2023df_motive_power_type["Growth Rate"] = df_motive_power_type.groupby('Vehicle type')["Total EVs"].pct_change().fillna(0) * 100# Calculate growth rate for HEVsdf_motive_power_state['Growth Rate HEVs'] = ((df_motive_power_state.groupby('State')['HEVs'].transform('last') - df_motive_power_state.groupby('State')['HEVs'].transform('first')) / df_motive_power_state.groupby('State')['HEVs'].transform('first')) * 100# Calculate growth rate for BEV/FCEVsdf_motive_power_state['Growth Rate BEV/FCEVs'] = ((df_motive_power_state.groupby('State')['BEV/FCEVs'].transform('last') - df_motive_power_state.groupby('State')['BEV/FCEVs'].transform('first')) / df_motive_power_state.groupby('State')['BEV/FCEVs'].transform('first')) * 100# Aggregate the growth rates to get overall growth rate for each statedf_motive_power_state['Overall Growth Rate'] = df_motive_power_state['Growth Rate HEVs'] + df_motive_power_state['Growth Rate BEV/FCEVs']# Get the overall growth rate for each statestatewise_growth_rate = df_motive_power_state[['State', 'Overall Growth Rate']].drop_duplicates().reset_index(drop=True)statewise_growth_rate# Set the stylesns.set_style("whitegrid")# Create the bar plotplt.figure(figsize=(14, 8))sns.barplot(x='State', y='Overall Growth Rate', data=statewise_growth_rate, palette='viridis')plt.title('Overall Growth Rate of Electric Vehicles by State (2021-2023)', fontsize=16)plt.xlabel('State', fontsize=14)plt.ylabel('Overall Growth Rate (%)', fontsize=14)plt.xticks(rotation=45)plt.tight_layout()plt.show()# Plotting increase in electric vehicle types by year for each vehicle typevehicle_types = df_motive_power_type["Vehicle type"].unique()plt.figure(figsize=(16, 12))for i, vtype in enumerate(vehicle_types, 1):    plt.subplot(3, 3, i)    subset = df_motive_power_type[df_motive_power_type["Vehicle type"] == vtype]    sns.lineplot(data=subset, x='Year', y='Total EVs', marker='o')    plt.title(vtype)    plt.ylim(0, subset['Total EVs'].max() + 1000)  # Setting y-axis to start from 0    plt.grid(True, which='both', linestyle='--', linewidth=0.5)plt.tight_layout()plt.show()# Visualize the growth rate for various vehicle typesplt.figure(figsize=(14, 8))sns.lineplot(x='Year', y='Growth Rate', hue='Vehicle type', data=df_motive_power_type, marker='o')plt.title('Growth Rate of Electric Vehicles by Vehicle Type (2021-2023)', fontsize=16)plt.xlabel('Year', fontsize=14)plt.ylabel('Growth Rate (%)', fontsize=14)plt.grid(True, which='both', linestyle='--', linewidth=0.5)plt.legend(title='Vehicle Type')plt.tight_layout()plt.show()# Visualize the growth rate for various vehicle types using bar chartsplt.figure(figsize=(14, 8))sns.barplot(x='Year', y='Growth Rate', hue='Vehicle type', data=df_motive_power_type, ci=None)plt.title('Growth Rate of Electric Vehicles by Vehicle Type (2021-2023)', fontsize=16)plt.xlabel('Year', fontsize=14)plt.ylabel('Growth Rate (%)', fontsize=14)plt.grid(True, which='both', axis='y', linestyle='--', linewidth=0.5)plt.legend(title='Vehicle Type')plt.tight_layout()plt.show()# Total growth rate from 2021 to 2023# Calculate the total growth rate from 2021 to 2023 for each vehicle typedf_total_growth = df_motive_power_type[df_motive_power_type["Year"] == 2023].copy()df_2021_values = df_motive_power_type[df_motive_power_type["Year"] == 2021][["Vehicle type", "Total EVs"]].set_index("Vehicle type")df_total_growth["2021 EVs"] = df_total_growth["Vehicle type"].map(df_2021_values["Total EVs"])df_total_growth["Total Growth Rate (2021-2023)"] = ((df_total_growth["Total EVs"] - df_total_growth["2021 EVs"]) / df_total_growth["2021 EVs"]) * 100# Visualize the total growth rate from 2021 to 2023 for each vehicle type using bar chartsplt.figure(figsize=(14, 8))sns.barplot(x='Vehicle type', y='Total Growth Rate (2021-2023)', data=df_total_growth, palette="viridis")plt.title('Total Growth Rate of Electric Vehicles by Vehicle Type (2021-2023)', fontsize=16)plt.xlabel('Vehicle Type', fontsize=14)plt.ylabel('Total Growth Rate (%)', fontsize=14)plt.grid(True, which='both', axis='y', linestyle='--', linewidth=0.5)plt.xticks(rotation=45, ha='right')plt.tight_layout()plt.show()# Victoria postcodes# Load the datasetdf_postcode = pd.read_csv('Whole_Fleet_Vehicle_Registration_Snapshot_by_Postcode_Q2_2023.csv')# Define the postcodes for each regioncities_major_regional_centres = list(range(3211, 3233)) + [3235, 3240, 3328, 3330, 3331, 3332, 3333, 3340, 3342] regional_centres_other_areas = list(range(3097, 3100)) + [3139, 3233, 3234, 3236, 3237, 3238, 3239] + list(range(3241, 3326)) + [3329, 3334, 3341] + list(range(3345, 3425)) + list(range(3430, 3800)) + list(range(3809, 3910)) + list(range(3912, 3972)) + list(range(3978, 3997))# Filter the dataset to include only rows with the specified Victoria postcodesdf_cities = df_postcode[df_postcode['POSTCODE'].isin(cities_major_regional_centres)]df_regional = df_postcode[df_postcode['POSTCODE'].isin(regional_centres_other_areas)]# Filter rows with 'CD_CL_FUEL_ENG' equal to 'E' and then sum the 'TOTAL1' column for both regionstotal_ev_cities = df_cities[df_cities['CD_CL_FUEL_ENG'] == 'E ']['TOTAL1'].sum()total_ev_regional = df_regional[df_regional['CD_CL_FUEL_ENG'] == 'E ']['TOTAL1'].sum()total_ev_cities_prop = total_ev_cities / df_cities['TOTAL1'].sum()total_ev_regional_prop = total_ev_regional / df_regional['TOTAL1'].sum()# Visualize the filtered number of electric vehicles in each region using a bar chartregions = ['Major Cities', 'Regional Areas']ev_counts = [total_ev_cities_prop, total_ev_regional_prop]plt.figure(figsize=(10, 6))plt.bar(regions, ev_counts, color=['blue', 'green'])plt.title('Proportion of Electric Vehicles in Victoria Regions (2023)')plt.ylabel('Proportion of EVs')plt.xlabel('Regions')plt.show()